{"version":3,"sources":["components/word.js","components/top.js","other/utils.js","other/api.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["Word","props","categories_map","Map","categories","useState","state","setState","handleClick","onDoubleClick","className","data","name","pronunciation","definition","examples","get","category","imageLink","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","deleteWord","id","Top","input","setInput","handleChange","event","value","target","addWord","key","onChange","type","placeholder","example","map","x","photo","utils","getFromLocalStorage","cache","localStorage","getItem","JSON","parse","setToLocalStorage","item","setItem","stringify","structureWord","word","parseInt","split","createNewWord","newWord","push","getCategories","a","console","log","fetch","res","json","error","getWords","url","method","api","putWord","headers","body","Index","words","setWords","setCategories","forceUpdate","React","useReducer","bool","toAdd","generated_id","newWords","i","length","splice","useEffect","then","timeAdded","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c687cbc6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n\r\nconst Word = (props) =>{\r\n    let categories_map = new Map(props.categories);\r\n    const [state, setState] = useState(false);\r\n    const handleClick = () => {\r\n        setState(!state);\r\n    }\r\n    const handleDelete = () => {\r\n        setState(false);\r\n        props.deleteWord(props.data.id);\r\n    }\r\n    return(\r\n        <>\r\n            <p onDoubleClick = {handleClick} className = \"word-el name\">\r\n                {props.data.name}\r\n            </p>\r\n            <p onDoubleClick = {handleClick} className = \"word-el\">\r\n                {props.data.pronunciation}\r\n            </p>\r\n            <p onDoubleClick = {handleClick} className = \"word-el\">\r\n                {props.data.definition}\r\n            </p>\r\n            <p onDoubleClick = {handleClick} className = \"word-el\">\r\n                {props.data.examples[0]}\r\n            </p>\r\n            <p onDoubleClick = {handleClick} className = \"word-el\">\r\n                {categories_map.get(props.data.category[0])}\r\n            </p>\r\n            <p onDoubleClick = {handleClick} className = \"word-el\">\r\n                {props.data.imageLink}\r\n            </p>\r\n            <Modal show={state} onHide={handleClick}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Confirm Action</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                Are you sure you want to delete the word <b>{props.data.name}</b>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClick}>\r\n                Close\r\n                </Button>\r\n                <Button variant=\"danger\" onClick={handleDelete}>\r\n                Delete\r\n                </Button>\r\n            </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Word;","import React, {useState} from 'react';\r\n\r\nconst Top = (props) => {\r\n    \r\n    const [input, setInput] = useState({\r\n        name: \"\",\r\n        pronunciation: \"\",\r\n        definition: \"\",\r\n        examples: \"\",\r\n        category: props.categories[0][0],\r\n        imageLink: \"\"\r\n    })\r\n    // console.log(input);\r\n\r\n    const handleAdd = () => {\r\n        props.addWord(input);\r\n    }\r\n    const handleChange = (event) => {\r\n        const value = event.target.value;\r\n        setInput({\r\n            ...input,\r\n            [event.target.name]: value\r\n        })\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <button onClick = {handleAdd} className = \"add-btn\">Add Word</button>\r\n        <p className = \"s\">\r\n            Phrase\r\n        </p>\r\n        <p className = \"s\">\r\n            Pronunciation\r\n        </p>\r\n        <p className = \"s\">\r\n            Definition\r\n        </p>\r\n        <p className = \"s\">\r\n            Example\r\n        </p>\r\n        <p className = \"s\">\r\n            Category\r\n        </p>\r\n        <p className = \"s\">\r\n            Photo\r\n        </p>\r\n        <textarea key = {1} name = {\"name\"} onChange = {handleChange} value = {input.name} type = \"text\" className = \"phrase-i input\" placeholder=\"phrase\"></textarea>\r\n        <textarea key = {2} name = {\"pronunciation\"} onChange = {handleChange} value = {input.pronunciation} type = \"text\" className = \"pronunciation-i input\" placeholder=\"pronunciation\"></textarea>\r\n        <textarea key = {3} name = {\"definition\"} onChange = {handleChange} value = {input.definition} type = \"text\" className = \"definiton-i input\" placeholder=\"definition\"></textarea>\r\n        <textarea key = {4} name = {\"examples\"} onChange = {handleChange} value = {input.example} type = \"text\" className = \"example-i input\" placeholder=\"example\"></textarea>\r\n        <div key = {5} className = \"select-box\">\r\n            <select name = {\"category\"} value = {input.category} onChange = {handleChange}>\r\n                {props.categories.map(x =>(\r\n                    <option key = {x[0]} value = {x[0]}>{x[1]}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n        <textarea key = {6} name = {\"imageLink\"} onChange = {handleChange} value = {input.photo} type = \"text\" className = \"example-i input\" placeholder=\"photo link\"></textarea>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Top;","const getFromLocalStorage = (key) => {\r\n    let cache = localStorage.getItem(key);\r\n    let data;\r\n    if (cache !== \"undefined\" && cache){\r\n        data = JSON.parse(cache);\r\n    }\r\n    else{\r\n        data = [];\r\n    }\r\n    // console.log(data);\r\n    return data;\r\n}\r\nconst setToLocalStorage = (key, item) => {\r\n    localStorage.setItem(key, JSON.stringify(item))\r\n}\r\nconst structureWord = (word) => {\r\n    let toAdd = {\r\n        category: parseInt(word.category,10),\r\n        definition: word.definition,\r\n        examples: word.examples.split(\"\\n\"),\r\n        imageLink: word.imageLink,\r\n        name: word.name,\r\n        pronunciation: word.pronunciation\r\n    }\r\n    return toAdd\r\n}\r\nconst createNewWord = (word, id) => {\r\n    let newWord = word;\r\n    let categories = [];\r\n    categories.push(parseInt(newWord.category, 10));\r\n    newWord.id = id;\r\n    newWord.category = categories;\r\n    return newWord\r\n}\r\nconst utils = {\r\n    getFromLocalStorage: getFromLocalStorage,\r\n    setToLocalStorage: setToLocalStorage,\r\n    structureWord: structureWord,\r\n    createNewWord: createNewWord\r\n}\r\nexport default utils;","\r\nconst getCategories = async () => {\r\n    console.log(\"request made\");\r\n    let url = \"https://us-central1-dictionary-1576615618624.cloudfunctions.net/widgets/shared/api/categories\";\r\n    try{\r\n        let res = await fetch(url);\r\n        const data = await res.json();\r\n        return(data);\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n}\r\nconst getWords = async () => {\r\n    console.log(\"Request made: Get Words\");\r\n    let url = \"https://us-central1-dictionary-1576615618624.cloudfunctions.net/widgets/shared/api/words\";\r\n    try{\r\n        let res = await fetch(url);\r\n        const data = await res.json();\r\n        return(data);\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n}\r\nconst deleteWord = async (id) => {\r\n    console.log(\"Request made: Delete Word\");\r\n    let url = `https://us-central1-dictionary-1576615618624.cloudfunctions.net/widgets/shared/api/words/?id=${parseInt(id, 10)}`;\r\n    try{\r\n        let res = await fetch(url,{\r\n            method: 'delete'\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n}\r\nconst putWord = async (word) => {\r\n    console.log(\"Request made: Put Word\");\r\n    let url = \"https://us-central1-dictionary-1576615618624.cloudfunctions.net/widgets/shared/api/addWord\";\r\n    try{\r\n        let res = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(word),\r\n        });\r\n        const data = await res.json();\r\n        return(data);\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nconst api = {\r\n    getCategories: getCategories,\r\n    getWords: getWords,\r\n    putWord: putWord,\r\n    deleteWord: deleteWord\r\n}\r\n\r\nexport default api;","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Word from './word'\r\nimport Top from './top';\r\nimport utils from '../other/utils'\r\nimport api from '../other/api'\r\nimport LazyLoad from 'react-lazyload';\r\n\r\n\r\nconst Index = () => {\r\n    // const [words,setWords] = useState([]);\r\n    const [words,setWords] = useState(utils.getFromLocalStorage(\"words\"));\r\n    const [categories, setCategories] = useState(utils.getFromLocalStorage(\"categories\"));\r\n    const forceUpdate = React.useReducer(bool => !bool)[1];\r\n\r\n    const addWord = async (word) => {\r\n        let toAdd = utils.structureWord(word);\r\n        let id = (await api.putWord(toAdd)).generated_id;\r\n        let newWords = words;\r\n        let newWord = utils.createNewWord(word, id);\r\n        newWords.push(newWord);\r\n        setWords(newWords);\r\n        forceUpdate();\r\n    }\r\n\r\n    const deleteWord = (id) => {\r\n        let newWords = words;\r\n        for (let i = 0; i < newWords.length; i++){\r\n            if (newWords[i].id == id){\r\n                newWords.splice(i,1);\r\n                break;\r\n            }\r\n        }\r\n        api.deleteWord(id);\r\n        setWords(newWords);\r\n        forceUpdate();\r\n    }\r\n\r\n    useEffect(() =>{\r\n        if (words.length == 0)\r\n            api.getWords().then(res =>{\r\n                console.log(res);\r\n                setWords(res);\r\n                utils.setToLocalStorage(\"words\", res);\r\n            });\r\n    }, []);\r\n    useEffect(() =>{\r\n        if(categories.length == 0)\r\n            api.getCategories().then(res =>{\r\n                console.log(res);\r\n                setCategories(res);\r\n                utils.setToLocalStorage(\"categories\", res);\r\n            })\r\n    },[])\r\n\r\n    if (typeof(words) === \"undefined\"){\r\n        return(\r\n            <h1>Error</h1>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className = \"words-box\">\r\n            <Top categories = {categories} addWord = {addWord}/>\r\n            {words.map(x =>(\r\n                <LazyLoad key = {x.timeAdded}>\r\n                    <Word key = {x.id} data = {x} categories = {categories} deleteWord = {deleteWord} />\r\n                </LazyLoad>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index;","import React from 'react';\nimport './style.css'\nimport Index from './components';\n\nfunction App() {\n  return (\n      <Index/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}